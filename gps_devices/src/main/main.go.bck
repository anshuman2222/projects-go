package main

import (
	"io/ioutil"
	"log"
	"net/http"
	"sync"

	"github.com/gorilla/mux"
)

var devices map[string]*Device
var mutex sync.Mutex

type Device struct {
	UID           string `json:"id"`
	GPSCoordinate string `json:"gps_coordinate"`
	SerialNumber  string `json:"serial_number"`
	IPAddress     string `json:"ip_address"`
}

type Customer struct {
	UUID    string             `json:"uuid"`
	Devices map[string]*Device `json:"devices"`
}

func reserve_devices(w http.ResponseWriter, r *http.Request) {
	data, err := ioutil.ReadAll(r.Body)

	if err != nil {
		log.Printf("Failed in reserve device reading data. Error: %s", err.Error())
		return
	}

}

func init() {
	devices = make(map[string]*Device)
}

func main() {
	log.Println("Program is starting....")

	candidates = make(map[string]*Candaidate)

	r := mux.NewRouter()

	//r.HandleFunc("/v1/devices/customers/{id}", get_device).Methods("GET")
	r.HandleFunc("/api/v1/devices/reserve ", reserve_devices).Methods("POST")
	//r.HandleFunc("/v1/devices/{id}", release_devices).Methods("DELETE")
	//r.HandleFunc("/v1/devices/customers/list", get_devices).Methods("POST")

	http.ListenAndServe(":8000", r)
}
